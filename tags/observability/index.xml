<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>observability on</title><link>https://omarghader.github.io/tags/observability/</link><description>Recent content in observability on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 15 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://omarghader.github.io/tags/observability/index.xml" rel="self" type="application/rss+xml"/><item><title>Building a Monitoring Stack with Prometheus, VictoriaMetrics, and Grafana: A Full Setup Guide</title><link>https://omarghader.github.io/monitoring-stack-prometheus-victoriametrics-grafana/</link><pubDate>Tue, 15 Jul 2025 00:00:00 +0000</pubDate><guid>https://omarghader.github.io/monitoring-stack-prometheus-victoriametrics-grafana/</guid><description>Building a Monitoring Stack with Prometheus, VictoriaMetrics, and Grafana Ever found yourself drowning in server logs, wondering why your application crashed again at 3 AM? I’ve been there—more times than I’d like to admit. That’s why I built a robust monitoring stack with Prometheus, VictoriaMetrics, and Grafana to keep an eye on my systems. In this guide, I’ll walk you through setting up this powerful trio to collect, store, and visualize metrics at scale—without losing your sanity.</description></item><item><title>Log Aggregation Using Grafana Loki: A Beginner’s Guide</title><link>https://omarghader.github.io/grafana-loki-log-aggregation-beginners-guide/</link><pubDate>Tue, 01 Jul 2025 00:00:00 +0000</pubDate><guid>https://omarghader.github.io/grafana-loki-log-aggregation-beginners-guide/</guid><description>Log Aggregation Using Grafana Loki: A Beginner’s Guide Ever stared at a mountain of logs, desperately searching for that one error that crashed your service? I’ve been there—more times than I’d like to admit. That’s why I fell in love with Grafana Loki, a lightweight log aggregation system that pairs perfectly with Grafana for seamless troubleshooting.
In this guide, I’ll walk you through setting up Loki to collect logs and correlate them with metrics in Grafana.</description></item><item><title>How to Use Recording Rules in Prometheus to Reduce Load and Speed Up Queries</title><link>https://omarghader.github.io/prometheus-recording-rules-reduce-load-speed-queries/</link><pubDate>Tue, 03 Jun 2025 00:00:00 +0000</pubDate><guid>https://omarghader.github.io/prometheus-recording-rules-reduce-load-speed-queries/</guid><description>How to Use Recording Rules in Prometheus to Reduce Load and Speed Up Queries I remember the first time my Prometheus server groaned under the weight of a complex Grafana dashboard—it felt like asking a toddler to solve calculus. Dashboards loaded slower than my morning coffee brewed, and my CPU metrics looked like a stress test. That’s when I discovered recording rules, Prometheus’s secret weapon for taming expensive queries. Here’s how to use them effectively.</description></item><item><title>How to Monitor API Health with Blackbox Exporter and Prometheus</title><link>https://omarghader.github.io/monitor-api-health-blackbox-prometheus/</link><pubDate>Tue, 15 Apr 2025 00:00:00 +0000</pubDate><guid>https://omarghader.github.io/monitor-api-health-blackbox-prometheus/</guid><description>How to Monitor API Health with Blackbox Exporter and Prometheus Ever had an API go down silently, only to realize it after users started complaining? I’ve been there—more times than I’d like to admit. That’s why I now rely on Prometheus and Blackbox Exporter to proactively monitor API health. In this guide, I’ll walk you through setting up Blackbox Exporter to probe endpoints, track latency, and alert you the moment something goes sideways.</description></item><item><title>High-Cardinality Metrics: Detection and Optimization in Prometheus and VictoriaMetrics</title><link>https://omarghader.github.io/high-cardinality-optimization-victoriametrics-prometheus/</link><pubDate>Sat, 12 Apr 2025 21:48:36 +0000</pubDate><guid>https://omarghader.github.io/high-cardinality-optimization-victoriametrics-prometheus/</guid><description>High-Cardinality Metrics: Detection and Optimization in Prometheus and VM I remember the first time my Prometheus instance crashed spectacularly after I added a new exporter. The logs screamed about &amp;ldquo;out of memory&amp;rdquo; errors, and my Grafana dashboards turned into ghost towns. After some frantic debugging, I discovered the culprit: high-cardinality metrics.
In this guide, I&amp;rsquo;ll share practical techniques I&amp;rsquo;ve learned for identifying and optimizing these metric monsters in both Prometheus and VictoriaMetrics.</description></item><item><title>Prometheus Anomaly detection: Z-Score in PromQL</title><link>https://omarghader.github.io/prometheus-anomaly-detection-z-score-in-promql/</link><pubDate>Thu, 10 Apr 2025 00:00:00 +0000</pubDate><guid>https://omarghader.github.io/prometheus-anomaly-detection-z-score-in-promql/</guid><description>Monitoring HTTP request rates is one of the most basic yet essential tasks in observability. A sudden spike might indicate a traffic surge or even a DDoS attack, while a sudden drop could signal a backend failure. Static thresholds work, but they often miss subtle patterns or raise too many false alarms. A better way is to use statistical anomaly detection—specifically Z-score based alerts in Prometheus.
In this post, we’ll walk through how to set up a Z-score PromQL alert to detect anomalies in HTTP request rates using only Prometheus and native PromQL.</description></item><item><title>A Full Guide to Monitoring Strategies for Enterprises</title><link>https://omarghader.github.io/monitoring-strategy-enterprise/</link><pubDate>Sun, 22 Oct 2023 20:59:01 +0200</pubDate><guid>https://omarghader.github.io/monitoring-strategy-enterprise/</guid><description>Monitoring, stop being blind!
After 3 years working in the monitoring team at the one of the biggest videogames company, I will unveil some secrets and strategies of monitoring for enterprises. These strategies can be applied to small or big companies depending on their context and uses.
But what is monitoring? Monitoring is the fact of collecting information about an entity (application, machine, URL&amp;hellip;) on a frequent basis. In general, this raw data is passed through visualization apps to give a visibility on the enterprise entities.</description></item><item><title>Vmalert: Revamp your Prometheus alert with microservices</title><link>https://omarghader.github.io/vmalert-setup/</link><pubDate>Thu, 28 Sep 2023 08:14:23 +0200</pubDate><guid>https://omarghader.github.io/vmalert-setup/</guid><description>Vmalert: the prometheus alerting microservice
While collecting metrics is important for monitoring, the real end goal is not visualizing the data. The most critical goal of metrics is to create alerts in case of bad behaviors or incidents. In the Prometheus world, prometheus itself generates alerts based on the metrics collected.
Let&amp;rsquo;s discover another product of VictoriaMetrics called Vmalert. To be honest, Vmalert is not a revolutionary product, exactly like Vmagent, but its strength is the ability to do 1 role: handling alerts with the minimum resources.</description></item><item><title>How to send duplicate RemoteWrite metrics</title><link>https://omarghader.github.io/prometheus-duplicate-remotewrite/</link><pubDate>Mon, 25 Sep 2023 08:14:23 +0200</pubDate><guid>https://omarghader.github.io/prometheus-duplicate-remotewrite/</guid><description>When working with metrics, you may want to send the metrics you&amp;rsquo;ve collected to 2 different prometheus instances for backup. Despite that a feature in Prometheus allows you send the metrics received to another prometheus, it&amp;rsquo;s not recommended to do that when working with high amounts of metrics.
Indeed, Prometheus consumes a lot of resources to do the remotewrite and this may reduce its capability to perform well. But other solution exists : lightweight, simple and works perfectly.</description></item></channel></rss>