<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DevOps on</title><link>https://omarghader.github.io/tags/devops/</link><description>Recent content in DevOps on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 22 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://omarghader.github.io/tags/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>Prometheus vs VictoriaMetrics: Performance, Storage, and Query Language Compared</title><link>https://omarghader.github.io/prometheus-vs-victoriametrics-comparison-performance-storage-query-language/</link><pubDate>Tue, 22 Jul 2025 00:00:00 +0000</pubDate><guid>https://omarghader.github.io/prometheus-vs-victoriametrics-comparison-performance-storage-query-language/</guid><description>Prometheus vs VictoriaMetrics: Which One Fits Your Monitoring Stack? I’ve spent years tinkering with monitoring tools—first as a hobbyist automating my smart home, then professionally while scaling observability pipelines. Two names kept popping up: Prometheus (the de facto standard) and VictoriaMetrics (the &amp;ldquo;faster, cheaper&amp;rdquo; alternative). But which one should you use? Let’s break it down with real-world benchmarks, storage deep-dives, and query language quirks.
Why Compare Prometheus and VictoriaMetrics? Prometheus is the Kubernetes-monitoring darling, but VictoriaMetrics promises better performance with lower resource usage.</description></item><item><title>Building a Monitoring Stack with Prometheus, VictoriaMetrics, and Grafana: A Full Setup Guide</title><link>https://omarghader.github.io/monitoring-stack-prometheus-victoriametrics-grafana/</link><pubDate>Tue, 15 Jul 2025 00:00:00 +0000</pubDate><guid>https://omarghader.github.io/monitoring-stack-prometheus-victoriametrics-grafana/</guid><description>Building a Monitoring Stack with Prometheus, VictoriaMetrics, and Grafana Ever found yourself drowning in server logs, wondering why your application crashed again at 3 AM? I’ve been there—more times than I’d like to admit. That’s why I built a robust monitoring stack with Prometheus, VictoriaMetrics, and Grafana to keep an eye on my systems. In this guide, I’ll walk you through setting up this powerful trio to collect, store, and visualize metrics at scale—without losing your sanity.</description></item><item><title>Log Aggregation Using Grafana Loki: A Beginner’s Guide</title><link>https://omarghader.github.io/grafana-loki-log-aggregation-beginners-guide/</link><pubDate>Tue, 01 Jul 2025 00:00:00 +0000</pubDate><guid>https://omarghader.github.io/grafana-loki-log-aggregation-beginners-guide/</guid><description>Log Aggregation Using Grafana Loki: A Beginner’s Guide Ever stared at a mountain of logs, desperately searching for that one error that crashed your service? I’ve been there—more times than I’d like to admit. That’s why I fell in love with Grafana Loki, a lightweight log aggregation system that pairs perfectly with Grafana for seamless troubleshooting.
In this guide, I’ll walk you through setting up Loki to collect logs and correlate them with metrics in Grafana.</description></item><item><title>Monitoring Disk Space Across Servers Using Node Exporter and Prometheus</title><link>https://omarghader.github.io/monitor-disk-space-node-exporter-prometheus-grafana/</link><pubDate>Tue, 17 Jun 2025 00:00:00 +0000</pubDate><guid>https://omarghader.github.io/monitor-disk-space-node-exporter-prometheus-grafana/</guid><description>Monitoring Disk Space Across Servers Using Node Exporter and Prometheus Ever had that sinking feeling when your server runs out of disk space at 3 AM? I have—more times than I’d like to admit. After one too many midnight emergencies, I decided to automate disk space monitoring using Prometheus, Node Exporter, and Grafana. Here’s how you can set it up too, complete with alerts and pretty dashboards to keep your sanity intact.</description></item><item><title>How to Monitor API Health with Blackbox Exporter and Prometheus</title><link>https://omarghader.github.io/monitor-api-health-blackbox-prometheus/</link><pubDate>Tue, 15 Apr 2025 00:00:00 +0000</pubDate><guid>https://omarghader.github.io/monitor-api-health-blackbox-prometheus/</guid><description>How to Monitor API Health with Blackbox Exporter and Prometheus Ever had an API go down silently, only to realize it after users started complaining? I’ve been there—more times than I’d like to admit. That’s why I now rely on Prometheus and Blackbox Exporter to proactively monitor API health. In this guide, I’ll walk you through setting up Blackbox Exporter to probe endpoints, track latency, and alert you the moment something goes sideways.</description></item><item><title>High-Cardinality Metrics: Detection and Optimization in Prometheus and VictoriaMetrics</title><link>https://omarghader.github.io/high-cardinality-optimization-victoriametrics-prometheus/</link><pubDate>Sat, 12 Apr 2025 21:48:36 +0000</pubDate><guid>https://omarghader.github.io/high-cardinality-optimization-victoriametrics-prometheus/</guid><description>High-Cardinality Metrics: Detection and Optimization in Prometheus and VM I remember the first time my Prometheus instance crashed spectacularly after I added a new exporter. The logs screamed about &amp;ldquo;out of memory&amp;rdquo; errors, and my Grafana dashboards turned into ghost towns. After some frantic debugging, I discovered the culprit: high-cardinality metrics.
In this guide, I&amp;rsquo;ll share practical techniques I&amp;rsquo;ve learned for identifying and optimizing these metric monsters in both Prometheus and VictoriaMetrics.</description></item><item><title>Monitor your applications easily with Grafana and Prometheus</title><link>https://omarghader.github.io/monitor-your-applications-easily-with-grafana-and-prometheus/</link><pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate><guid>https://omarghader.github.io/monitor-your-applications-easily-with-grafana-and-prometheus/</guid><description>1. What is Prometheus &amp;amp; Grafana? Prometheus is a monitoring system which collects metrics from applications easily. Grafana is a user-friendly visualization project which transforms the metrics collected before into amazing charts. In this article, you will learn how to connect prometheus to grafana using a docker compose file.
2. Requirements Install docker Install docker compose Golang &amp;gt;= 1.08 3. Create your application If you want to get metrics from your application, the first step is to add prometheus to your application code.</description></item><item><title>Docker Compose Tutorial</title><link>https://omarghader.github.io/docker-compose-tutorial/</link><pubDate>Wed, 20 Dec 2017 00:00:00 +0000</pubDate><guid>https://omarghader.github.io/docker-compose-tutorial/</guid><description>If you are tired of configuring your docker containers every time you want to run it, docker compose is the solution. Docker compose is a tool that will read a configuration file, and will translate it to docker command easily.
If you like this article, leave a comment and share it with your friends :)
Requirement For this tutorial, you need a linux machine. I am using an Orangepi server because it is very performant and affordable.</description></item><item><title>Introduction to Docker</title><link>https://omarghader.github.io/introduction-to-docker/</link><pubDate>Sun, 23 Aug 2015 00:00:00 +0000</pubDate><guid>https://omarghader.github.io/introduction-to-docker/</guid><description>Docker is a new open-source project that makes deployment of applications easier. The idea of this technology is very simple : &amp;ldquo;the application runs inside a software container. This container is acting like a mini Operating System&amp;rdquo;. Basics are very similar to Virtual machine : An OS is running independently of host&amp;rsquo;s OS. Networking is working using bridges&amp;hellip; Docker is using 2 terms : image and container:
An image is a packaged application that is not running.</description></item><item><title>My First Post</title><link>https://omarghader.github.io/my-first-post/</link><pubDate>Sat, 22 Aug 2015 00:00:00 +0000</pubDate><guid>https://omarghader.github.io/my-first-post/</guid><description>Hi, This is my first post. I&amp;rsquo;m computer and communication engineering student at INSA Toulouse. I&amp;rsquo;m interested in programming in : Java , C , Go lang and Javascript&amp;hellip; Also, I&amp;rsquo;m interested in Android development , Web apps, and Security DevOps, and Linux Administration. I would like to use this blog to share information about computer science.
Android development My Future posts will be related to these subjects. My tutorials will be focused on simplifying and coding android applications efficiently.</description></item></channel></rss>