<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Monitoring on</title><link>https://omarghader.github.io/tags/monitoring/</link><description>Recent content in Monitoring on</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Thu, 10 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://omarghader.github.io/tags/monitoring/index.xml" rel="self" type="application/rss+xml"/><item><title>Detect HTTP Traffic Anomalies in Prometheus Using Z-Score-Based PromQL Alerts</title><link>https://omarghader.github.io/detect-http-traffic-anomalies-in-prometheus-using-z-score-based-promql-alerts/</link><pubDate>Thu, 10 Apr 2025 00:00:00 +0000</pubDate><guid>https://omarghader.github.io/detect-http-traffic-anomalies-in-prometheus-using-z-score-based-promql-alerts/</guid><description>&lt;p>Monitoring HTTP request rates is one of the most basic yet essential tasks in observability. A sudden spike might indicate a traffic surge or even a DDoS attack, while a sudden drop could signal a backend failure. Static thresholds work, but they often miss subtle patterns or raise too many false alarms. A better way is to use statistical anomaly detection—specifically Z-score based alerts in Prometheus.&lt;/p>
&lt;p>In this post, we’ll walk through how to set up a Z-score PromQL alert to detect anomalies in HTTP request rates using only Prometheus and native PromQL.&lt;/p></description></item><item><title>A Full Guide to Monitoring Strategies for Enterprises</title><link>https://omarghader.github.io/monitoring-strategy-enterprise/</link><pubDate>Sun, 22 Oct 2023 20:59:01 +0200</pubDate><guid>https://omarghader.github.io/monitoring-strategy-enterprise/</guid><description>&lt;p>Monitoring, stop being blind!&lt;/p>
&lt;p>After 3 years working in the monitoring team at the one of the biggest videogames company, I will unveil some secrets and strategies of monitoring for enterprises. These strategies can be applied to small or big companies depending on their context and uses.&lt;/p>
&lt;p>But &lt;strong>what is monitoring?&lt;/strong> Monitoring is the fact of collecting information about an entity (application, machine, URL&amp;hellip;) on a frequent basis. In general, this raw data is passed through visualization apps to give a visibility on the enterprise entities. Then, one of the end goals is to create alerts based on this data to detect or anticipate abnormal behaviors.&lt;/p></description></item><item><title>Vmalert: Revamp your Prometheus alert with microservices</title><link>https://omarghader.github.io/vmalert-setup/</link><pubDate>Thu, 28 Sep 2023 08:14:23 +0200</pubDate><guid>https://omarghader.github.io/vmalert-setup/</guid><description>&lt;p>Vmalert: the prometheus alerting microservice&lt;/p>
&lt;p>While collecting metrics is important for monitoring, the real end goal is not visualizing the data. The most critical goal of metrics is to create alerts in case of bad behaviors or incidents. In the Prometheus world, prometheus itself generates alerts based on the metrics collected.&lt;/p>
&lt;p>Let&amp;rsquo;s discover another product of VictoriaMetrics called &lt;a href="https://docs.victoriametrics.com/vmalert.html">Vmalert&lt;/a>. To be honest, Vmalert is not a revolutionary product, exactly like &lt;a href="https://omarghader.github.io/prometheus-duplicate-remotewrite/">Vmagent&lt;/a>, but its strength is the ability to do 1 role: handling alerts with the minimum resources.&lt;/p></description></item><item><title>How to send duplicate RemoteWrite metrics</title><link>https://omarghader.github.io/prometheus-duplicate-remotewrite/</link><pubDate>Mon, 25 Sep 2023 08:14:23 +0200</pubDate><guid>https://omarghader.github.io/prometheus-duplicate-remotewrite/</guid><description>&lt;p>When working with metrics, you may want to send the metrics you&amp;rsquo;ve collected to 2 different prometheus instances for backup. Despite that a &lt;a href="https://prometheus.io/docs/practices/remote_write/">feature in Prometheus&lt;/a> allows you send the metrics received to another prometheus, it&amp;rsquo;s not recommended to do that when working with high amounts of metrics.&lt;/p>
&lt;p>Indeed, Prometheus consumes a lot of resources to do the remotewrite and this may reduce its capability to perform well. But other solution exists : lightweight, simple and works perfectly.&lt;/p></description></item></channel></rss>