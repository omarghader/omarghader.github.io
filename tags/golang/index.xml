<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on</title><link>https://omarghader.github.io/tags/golang/</link><description>Recent content in Golang on</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Sun, 30 Oct 2022 08:57:23 +0200</lastBuildDate><atom:link href="https://omarghader.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Go strings manipulation: Optimize performance x100</title><link>https://omarghader.github.io/golang-strings-manipulation-optimization-performance/</link><pubDate>Sun, 30 Oct 2022 08:57:23 +0200</pubDate><guid>https://omarghader.github.io/golang-strings-manipulation-optimization-performance/</guid><description>&lt;p>Optimization, faster, better&amp;hellip; these words are always what we search for on google to make our programs more performant.&lt;/p>
&lt;p>In a recent project I&amp;rsquo;ve worked on, the optimization was the main focus. While string manipulation could not be your issue if your program process few words, my project was processing millions of strings per second. Thus, each nanosecond counts!&lt;/p>
&lt;p>The tips below are the fruit of 2 months of work. These tips may not all fit your needs, test them all and choose what fits your code more.&lt;/p></description></item></channel></rss>