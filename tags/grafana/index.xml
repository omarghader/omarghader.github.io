<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>grafana on</title><link>https://omarghader.github.io/tags/grafana/</link><description>Recent content in grafana on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 26 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://omarghader.github.io/tags/grafana/index.xml" rel="self" type="application/rss+xml"/><item><title>Monitor Home Internet Speed Automatically with Prometheus and Speedtest Exporter</title><link>https://omarghader.github.io/monitor-home-internet-speed-prometheus-speedtest-exporter/</link><pubDate>Tue, 26 Aug 2025 00:00:00 +0000</pubDate><guid>https://omarghader.github.io/monitor-home-internet-speed-prometheus-speedtest-exporter/</guid><description>I've been battling my internet service provider for months over sporadic slowdowns that always seem to happen right before my important video calls. Sound familiar? After one too many "everything looks fine on our end" responses, I decided to take matters into my own hands and build a system that automatically tracks my internet speed 24/7.
In this tutorial, I'll show you how to set up your own internet speed monitoring system using Prometheus and a Speedtest Exporter.</description></item><item><title>Using PromQL to Analyze CPU, Memory, and Network Metrics Effectively</title><link>https://omarghader.github.io/promql-cpu-memory-network-metrics-tutorial/</link><pubDate>Tue, 12 Aug 2025 00:00:00 +0000</pubDate><guid>https://omarghader.github.io/promql-cpu-memory-network-metrics-tutorial/</guid><description>Using PromQL to Analyze CPU, Memory, and Network Metrics Effectively If you’ve ever stared at a Grafana dashboard wondering why your server’s CPU is spiking like a caffeinated squirrel, you’re not alone. Prometheus and PromQL are my go-to tools for making sense of infrastructure metrics—once you get the hang of them, they’re like having X-ray vision for your systems.
In this guide, I’ll walk you through writing effective PromQL queries to monitor CPU, memory, and network performance.</description></item><item><title>Building a Monitoring Stack with Prometheus, VictoriaMetrics, and Grafana: A Full Setup Guide</title><link>https://omarghader.github.io/monitoring-stack-prometheus-victoriametrics-grafana/</link><pubDate>Tue, 15 Jul 2025 00:00:00 +0000</pubDate><guid>https://omarghader.github.io/monitoring-stack-prometheus-victoriametrics-grafana/</guid><description>Building a Monitoring Stack with Prometheus, VictoriaMetrics, and Grafana Ever found yourself drowning in server logs, wondering why your application crashed again at 3 AM? I’ve been there—more times than I’d like to admit. That’s why I built a robust monitoring stack with Prometheus, VictoriaMetrics, and Grafana to keep an eye on my systems. In this guide, I’ll walk you through setting up this powerful trio to collect, store, and visualize metrics at scale—without losing your sanity.</description></item><item><title>Log Aggregation Using Grafana Loki: A Beginner’s Guide</title><link>https://omarghader.github.io/grafana-loki-log-aggregation-beginners-guide/</link><pubDate>Tue, 01 Jul 2025 00:00:00 +0000</pubDate><guid>https://omarghader.github.io/grafana-loki-log-aggregation-beginners-guide/</guid><description>Log Aggregation Using Grafana Loki: A Beginner’s Guide Ever stared at a mountain of logs, desperately searching for that one error that crashed your service? I’ve been there—more times than I’d like to admit. That’s why I fell in love with Grafana Loki, a lightweight log aggregation system that pairs perfectly with Grafana for seamless troubleshooting.
In this guide, I’ll walk you through setting up Loki to collect logs and correlate them with metrics in Grafana.</description></item><item><title>Monitoring Disk Space Across Servers Using Node Exporter and Prometheus</title><link>https://omarghader.github.io/monitor-disk-space-node-exporter-prometheus-grafana/</link><pubDate>Tue, 17 Jun 2025 00:00:00 +0000</pubDate><guid>https://omarghader.github.io/monitor-disk-space-node-exporter-prometheus-grafana/</guid><description>Monitoring Disk Space Across Servers Using Node Exporter and Prometheus Ever had that sinking feeling when your server runs out of disk space at 3 AM? I have—more times than I’d like to admit. After one too many midnight emergencies, I decided to automate disk space monitoring using Prometheus, Node Exporter, and Grafana. Here’s how you can set it up too, complete with alerts and pretty dashboards to keep your sanity intact.</description></item><item><title>Grafana 9 Alert : How to customize alert message</title><link>https://omarghader.github.io/grafana-alerting-custom-message/</link><pubDate>Sat, 05 Nov 2022 11:09:41 +0100</pubDate><guid>https://omarghader.github.io/grafana-alerting-custom-message/</guid><description>Grafana added the alert feature recently and it&amp;rsquo;s now released with the Grafana 9. That&amp;rsquo;s a great feature for the people who don&amp;rsquo;t want to set a proper alermanager and to configure it. I&amp;rsquo;ve took the time to explore the alert and play with it. Let&amp;rsquo;s see how it works!
Deploy grafana and prometheus With the docker-compose file below run the grafana and prometheus docker-compose up -d.
# docker-compose.yml file version: &amp;#34;3.</description></item><item><title>Monitor your applications easily with Grafana and Prometheus</title><link>https://omarghader.github.io/monitor-your-applications-easily-with-grafana-and-prometheus/</link><pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate><guid>https://omarghader.github.io/monitor-your-applications-easily-with-grafana-and-prometheus/</guid><description>1. What is Prometheus &amp;amp; Grafana? Prometheus is a monitoring system which collects metrics from applications easily. Grafana is a user-friendly visualization project which transforms the metrics collected before into amazing charts. In this article, you will learn how to connect prometheus to grafana using a docker compose file.
2. Requirements Install docker Install docker compose Golang &amp;gt;= 1.08 3. Create your application If you want to get metrics from your application, the first step is to add prometheus to your application code.</description></item></channel></rss>